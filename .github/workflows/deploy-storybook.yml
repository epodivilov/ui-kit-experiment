name: Deploy PR Storybook

# Trigger workflow on pull request events
on:
  pull_request:
    types: [opened, synchronize, reopened]

# Set permissions for GitHub Actions
# These are required for:
# - contents: write - Push to gh-pages branch
# - pull-requests: write - Post comments on PRs
permissions:
  contents: write
  pull-requests: write

jobs:
  deploy-storybook:
    name: Build and Deploy Storybook
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'  # Use latest LTS version
          cache: 'pnpm'

      # Setup pnpm package manager
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      # Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Run quality checks - Build library
      - name: Build library
        run: pnpm build

      # Run quality checks - Type checking
      - name: Run type check
        run: pnpm typecheck

      # Run quality checks - Linting
      - name: Run linter
        run: pnpm lint

      # Build Storybook
      - name: Build Storybook
        run: pnpm storybook:build

      # Sanitize branch name for use as directory name
      # Replace / with - and remove special characters
      - name: Sanitize branch name
        id: sanitize
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/\//-/g' | sed 's/[^a-zA-Z0-9-]/-/g')
          echo "branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          echo "Sanitized branch name: $SANITIZED_BRANCH"

      # Checkout gh-pages branch to deploy
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-branch
          fetch-depth: 0

      # Deploy Storybook to branch-specific directory
      - name: Deploy to gh-pages
        run: |
          BRANCH_DIR="gh-pages-branch/${{ steps.sanitize.outputs.branch }}"

          # Remove existing branch directory if it exists
          if [ -d "$BRANCH_DIR" ]; then
            echo "Removing existing deployment for branch: ${{ steps.sanitize.outputs.branch }}"
            rm -rf "$BRANCH_DIR"
          fi

          # Create branch directory and copy Storybook build
          echo "Deploying Storybook to: $BRANCH_DIR"
          mkdir -p "$BRANCH_DIR"
          cp -r storybook-static/* "$BRANCH_DIR/"

          # Configure git
          cd gh-pages-branch
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit and push changes
          git add .
          if git diff --staged --quiet; then
            echo "No changes to deploy"
          else
            git commit -m "Deploy Storybook for PR #${{ github.event.pull_request.number }} (${{ github.head_ref }})"
            git push origin gh-pages
            echo "Successfully deployed Storybook"
          fi

      # Generate branch index page
      - name: Generate branch index
        run: |
          cd gh-pages-branch
          node ../scripts/generate-branch-index.js .

          # Configure git (in case it's a new session)
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit and push index.html if it changed
          git add index.html
          if git diff --staged --quiet; then
            echo "No changes to branch index"
          else
            git commit -m "Update branch index for PR #${{ github.event.pull_request.number }}"
            git push origin gh-pages
            echo "Successfully updated branch index"
          fi

      # Post comment on PR with Storybook URL
      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.sanitize.outputs.branch }}';
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;

            // Construct Storybook URL
            // Format: https://{owner}.github.io/{repo}/{branch}/
            const storybookUrl = `https://${repo.owner}.github.io/${repo.repo}/${branchName}/`;
            const indexUrl = `https://${repo.owner}.github.io/${repo.repo}/`;

            // Create comment body
            const commentBody = `## üìö Storybook Deployed

            Your Storybook has been successfully deployed and is ready for preview!

            **Preview URL:** ${storybookUrl}

            **All Branches:** ${indexUrl}

            ---

            *This Storybook build will be updated automatically with each new commit to this PR.*`;

            // Check if bot has already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('## üìö Storybook Deployed')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: repo.owner,
                repo: repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
              console.log('Updated existing PR comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log('Created new PR comment');
            }

      # Handle deployment failures
      - name: Comment on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;

            const commentBody = `## ‚ö†Ô∏è Storybook Deployment Failed

            The Storybook deployment for this PR has failed. Please check the [workflow logs](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${{ github.run_id }}) for more details.

            Common issues:
            - Build errors in the library or Storybook
            - Type checking failures
            - Linting errors
            - Missing dependencies

            ---

            *Please fix the issues and push a new commit to retry the deployment.*`;

            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
