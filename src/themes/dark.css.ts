/**
 * Dark Theme
 *
 * The dark theme implementation using the design tokens
 * from the style dictionary and following the theme contract.
 * Colors are inverted for proper dark mode experience.
 */

import { createTheme } from '@vanilla-extract/css';
import { themeContract } from './contracts/theme.css';
import {
  // Colors
  ColorCoreNeutral0,
  ColorCoreNeutral50,
  ColorCoreNeutral100,
  ColorCoreNeutral200,
  ColorCoreNeutral300,
  ColorCoreNeutral400,
  ColorCoreNeutral500,
  ColorCoreNeutral600,
  ColorCoreNeutral700,
  ColorCoreNeutral800,
  ColorCoreNeutral900,
  ColorCoreNeutral950,
  ColorCorePrimary50,
  ColorCorePrimary100,
  ColorCorePrimary200,
  ColorCorePrimary300,
  ColorCorePrimary400,
  ColorCorePrimary500,
  ColorCorePrimary600,
  ColorCorePrimary700,
  ColorCorePrimary800,
  ColorCorePrimary900,
  ColorCorePrimary950,
  ColorCoreSuccess50,
  ColorCoreSuccess100,
  ColorCoreSuccess200,
  ColorCoreSuccess300,
  ColorCoreSuccess400,
  ColorCoreSuccess500,
  ColorCoreSuccess600,
  ColorCoreSuccess700,
  ColorCoreSuccess800,
  ColorCoreSuccess900,
  ColorCoreSuccess950,
  ColorCoreWarning50,
  ColorCoreWarning100,
  ColorCoreWarning200,
  ColorCoreWarning300,
  ColorCoreWarning400,
  ColorCoreWarning500,
  ColorCoreWarning600,
  ColorCoreWarning700,
  ColorCoreWarning800,
  ColorCoreWarning900,
  ColorCoreWarning950,
  ColorCoreError50,
  ColorCoreError100,
  ColorCoreError200,
  ColorCoreError300,
  ColorCoreError400,
  ColorCoreError500,
  ColorCoreError600,
  ColorCoreError700,
  ColorCoreError800,
  ColorCoreError900,
  ColorCoreError950,
  // Typography
  TypographyFontFamilySans,
  TypographyFontFamilyMono,
  TypographyFontSizeXs,
  TypographyFontSizeSm,
  TypographyFontSizeBase,
  TypographyFontSizeLg,
  TypographyFontSizeXl,
  TypographyFontSize2xl,
  TypographyFontSize3xl,
  TypographyFontSize4xl,
  TypographyFontSize5xl,
  TypographyFontSize6xl,
  TypographyFontSize7xl,
  TypographyFontSize8xl,
  TypographyFontSize9xl,
  TypographyFontWeightThin,
  TypographyFontWeightExtralight,
  TypographyFontWeightLight,
  TypographyFontWeightNormal,
  TypographyFontWeightMedium,
  TypographyFontWeightSemibold,
  TypographyFontWeightBold,
  TypographyFontWeightExtrabold,
  TypographyFontWeightBlack,
  TypographyFontLineHeightNone,
  TypographyFontLineHeightTight,
  TypographyFontLineHeightSnug,
  TypographyFontLineHeightNormal,
  TypographyFontLineHeightRelaxed,
  TypographyFontLineHeightLoose,
  // Spacing
  SpacingCore0,
  SpacingCore1,
  SpacingCore2,
  SpacingCore3,
  SpacingCore4,
  SpacingCore5,
  SpacingCore6,
  SpacingCore7,
  SpacingCore8,
  SpacingCore9,
  SpacingCore10,
  SpacingCore11,
  SpacingCore12,
  SpacingCore14,
  SpacingCore16,
  SpacingCore20,
  SpacingCore24,
  SpacingCore28,
  SpacingCore32,
  SpacingCore36,
  SpacingCore40,
  SpacingCore44,
  SpacingCore48,
  SpacingCore52,
  SpacingCore56,
  SpacingCore60,
  SpacingCore64,
  SpacingCore72,
  SpacingCore80,
  SpacingCore96,
  // Borders
  BorderRadiusNone,
  BorderRadiusSm,
  BorderRadiusBase,
  BorderRadiusMd,
  BorderRadiusLg,
  BorderRadiusXl,
  BorderRadius2xl,
  BorderRadius3xl,
  BorderRadiusFull,
  BorderWidth0,
  BorderWidth1,
  BorderWidth2,
  BorderWidth4,
  BorderWidth8,
  // Shadows
  ShadowCoreXs,
  ShadowCoreSm,
  ShadowCoreBase,
  ShadowCoreMd,
  ShadowCoreLg,
  ShadowCoreXl,
  ShadowCore2xl,
  ShadowCoreInner,
  ShadowCoreNone,
  // Animations
  AnimationDurationFast,
  AnimationDurationNormal,
  AnimationDurationSlow,
  AnimationEasingLinear,
  AnimationEasingEaseIn,
  AnimationEasingEaseOut,
  AnimationEasingEaseInOut,
} from '../tokens/generated/tokens';

export const darkTheme = createTheme(themeContract, {
  color: {
    core: {
      neutral: {
        0: ColorCoreNeutral0,
        50: ColorCoreNeutral50,
        100: ColorCoreNeutral100,
        200: ColorCoreNeutral200,
        300: ColorCoreNeutral300,
        400: ColorCoreNeutral400,
        500: ColorCoreNeutral500,
        600: ColorCoreNeutral600,
        700: ColorCoreNeutral700,
        800: ColorCoreNeutral800,
        900: ColorCoreNeutral900,
        950: ColorCoreNeutral950,
      },
      primary: {
        50: ColorCorePrimary50,
        100: ColorCorePrimary100,
        200: ColorCorePrimary200,
        300: ColorCorePrimary300,
        400: ColorCorePrimary400,
        500: ColorCorePrimary500,
        600: ColorCorePrimary600,
        700: ColorCorePrimary700,
        800: ColorCorePrimary800,
        900: ColorCorePrimary900,
        950: ColorCorePrimary950,
      },
      success: {
        50: ColorCoreSuccess50,
        100: ColorCoreSuccess100,
        200: ColorCoreSuccess200,
        300: ColorCoreSuccess300,
        400: ColorCoreSuccess400,
        500: ColorCoreSuccess500,
        600: ColorCoreSuccess600,
        700: ColorCoreSuccess700,
        800: ColorCoreSuccess800,
        900: ColorCoreSuccess900,
        950: ColorCoreSuccess950,
      },
      warning: {
        50: ColorCoreWarning50,
        100: ColorCoreWarning100,
        200: ColorCoreWarning200,
        300: ColorCoreWarning300,
        400: ColorCoreWarning400,
        500: ColorCoreWarning500,
        600: ColorCoreWarning600,
        700: ColorCoreWarning700,
        800: ColorCoreWarning800,
        900: ColorCoreWarning900,
        950: ColorCoreWarning950,
      },
      error: {
        50: ColorCoreError50,
        100: ColorCoreError100,
        200: ColorCoreError200,
        300: ColorCoreError300,
        400: ColorCoreError400,
        500: ColorCoreError500,
        600: ColorCoreError600,
        700: ColorCoreError700,
        800: ColorCoreError800,
        900: ColorCoreError900,
        950: ColorCoreError950,
      },
    },
    // Dark theme semantic colors (inverted from light theme)
    semantic: {
      background: {
        default: ColorCoreNeutral950, // Almost black background
        subtle: ColorCoreNeutral900, // Very dark gray
        muted: ColorCoreNeutral800, // Dark gray
        emphasis: ColorCoreNeutral100, // Light background for emphasis
        inverse: ColorCoreNeutral0, // White
      },
      text: {
        default: ColorCoreNeutral100, // Light text on dark background
        subtle: ColorCoreNeutral300, // Medium-light gray text
        muted: ColorCoreNeutral500, // Muted gray text
        inverse: ColorCoreNeutral950, // Dark text for light backgrounds
        accent: ColorCorePrimary400, // Lighter primary blue for better contrast
        success: ColorCoreSuccess400, // Lighter success green text
        warning: ColorCoreWarning400, // Lighter warning amber text
        error: ColorCoreError400, // Lighter error red text
      },
      border: {
        default: ColorCoreNeutral800, // Dark border
        subtle: ColorCoreNeutral900, // Very dark border
        muted: ColorCoreNeutral700, // Medium-dark border
        emphasis: ColorCoreNeutral600, // Emphasized border
        accent: ColorCorePrimary500, // Primary blue border (same as light)
        success: ColorCoreSuccess500, // Success green border
        warning: ColorCoreWarning500, // Warning amber border
        error: ColorCoreError500, // Error red border
      },
      surface: {
        default: ColorCoreNeutral950, // Almost black surface
        subtle: ColorCoreNeutral900, // Very dark surface
        muted: ColorCoreNeutral800, // Dark surface
        emphasis: ColorCoreNeutral700, // Emphasized surface
        inverse: ColorCoreNeutral100, // Light surface for contrast
      },
    },
  },

  typography: {
    fontFamily: {
      sans: Array.isArray(TypographyFontFamilySans) ? TypographyFontFamilySans.join(', ') : TypographyFontFamilySans,
      mono: Array.isArray(TypographyFontFamilyMono) ? TypographyFontFamilyMono.join(', ') : TypographyFontFamilyMono,
    },
    fontSize: {
      xs: TypographyFontSizeXs,
      sm: TypographyFontSizeSm,
      base: TypographyFontSizeBase,
      lg: TypographyFontSizeLg,
      xl: TypographyFontSizeXl,
      '2xl': TypographyFontSize2xl,
      '3xl': TypographyFontSize3xl,
      '4xl': TypographyFontSize4xl,
      '5xl': TypographyFontSize5xl,
      '6xl': TypographyFontSize6xl,
      '7xl': TypographyFontSize7xl,
      '8xl': TypographyFontSize8xl,
      '9xl': TypographyFontSize9xl,
    },
    fontWeight: {
      thin: TypographyFontWeightThin,
      extralight: TypographyFontWeightExtralight,
      light: TypographyFontWeightLight,
      normal: TypographyFontWeightNormal,
      medium: TypographyFontWeightMedium,
      semibold: TypographyFontWeightSemibold,
      bold: TypographyFontWeightBold,
      extrabold: TypographyFontWeightExtrabold,
      black: TypographyFontWeightBlack,
    },
    lineHeight: {
      none: TypographyFontLineHeightNone,
      tight: TypographyFontLineHeightTight,
      snug: TypographyFontLineHeightSnug,
      normal: TypographyFontLineHeightNormal,
      relaxed: TypographyFontLineHeightRelaxed,
      loose: TypographyFontLineHeightLoose,
    },
  },

  spacing: {
    0: SpacingCore0,
    1: SpacingCore1,
    2: SpacingCore2,
    3: SpacingCore3,
    4: SpacingCore4,
    5: SpacingCore5,
    6: SpacingCore6,
    7: SpacingCore7,
    8: SpacingCore8,
    9: SpacingCore9,
    10: SpacingCore10,
    11: SpacingCore11,
    12: SpacingCore12,
    14: SpacingCore14,
    16: SpacingCore16,
    20: SpacingCore20,
    24: SpacingCore24,
    28: SpacingCore28,
    32: SpacingCore32,
    36: SpacingCore36,
    40: SpacingCore40,
    44: SpacingCore44,
    48: SpacingCore48,
    52: SpacingCore52,
    56: SpacingCore56,
    60: SpacingCore60,
    64: SpacingCore64,
    72: SpacingCore72,
    80: SpacingCore80,
    96: SpacingCore96,
  },

  border: {
    radius: {
      none: BorderRadiusNone,
      sm: BorderRadiusSm,
      default: BorderRadiusBase,
      md: BorderRadiusMd,
      lg: BorderRadiusLg,
      xl: BorderRadiusXl,
      '2xl': BorderRadius2xl,
      '3xl': BorderRadius3xl,
      full: BorderRadiusFull,
    },
    width: {
      0: BorderWidth0,
      default: BorderWidth1,
      2: BorderWidth2,
      4: BorderWidth4,
      8: BorderWidth8,
    },
  },

  shadow: {
    xs: ShadowCoreXs,
    sm: ShadowCoreSm,
    default: ShadowCoreBase,
    md: ShadowCoreMd,
    lg: ShadowCoreLg,
    xl: ShadowCoreXl,
    '2xl': ShadowCore2xl,
    inner: ShadowCoreInner,
    none: ShadowCoreNone,
  },

  animation: {
    duration: {
      fast: AnimationDurationFast,
      normal: AnimationDurationNormal,
      slow: AnimationDurationSlow,
    },
    easing: {
      linear: AnimationEasingLinear,
      easeIn: AnimationEasingEaseIn,
      easeOut: AnimationEasingEaseOut,
      easeInOut: AnimationEasingEaseInOut,
    },
  },
});